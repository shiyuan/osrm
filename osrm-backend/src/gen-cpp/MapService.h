/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MapService_H
#define MapService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "map_service_types.h"

namespace map_service {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MapServiceIf {
 public:
  virtual ~MapServiceIf() {}
  virtual int32_t ping() = 0;
  virtual void pointToPointRoute(PointToPointResponse& _return, const PointToPointRequest& request) = 0;
  virtual void batchPointToPointRoute(std::vector<PointToPointResponse> & _return, const std::vector<PointToPointRequest> & requests) = 0;
};

class MapServiceIfFactory {
 public:
  typedef MapServiceIf Handler;

  virtual ~MapServiceIfFactory() {}

  virtual MapServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MapServiceIf* /* handler */) = 0;
};

class MapServiceIfSingletonFactory : virtual public MapServiceIfFactory {
 public:
  MapServiceIfSingletonFactory(const boost::shared_ptr<MapServiceIf>& iface) : iface_(iface) {}
  virtual ~MapServiceIfSingletonFactory() {}

  virtual MapServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MapServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<MapServiceIf> iface_;
};

class MapServiceNull : virtual public MapServiceIf {
 public:
  virtual ~MapServiceNull() {}
  int32_t ping() {
    int32_t _return = 0;
    return _return;
  }
  void pointToPointRoute(PointToPointResponse& /* _return */, const PointToPointRequest& /* request */) {
    return;
  }
  void batchPointToPointRoute(std::vector<PointToPointResponse> & /* _return */, const std::vector<PointToPointRequest> & /* requests */) {
    return;
  }
};


class MapService_ping_args {
 public:

  MapService_ping_args(const MapService_ping_args&);
  MapService_ping_args& operator=(const MapService_ping_args&);
  MapService_ping_args() {
  }

  virtual ~MapService_ping_args() throw();

  bool operator == (const MapService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MapService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapService_ping_pargs {
 public:


  virtual ~MapService_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapService_ping_result__isset {
  _MapService_ping_result__isset() : success(false) {}
  bool success :1;
} _MapService_ping_result__isset;

class MapService_ping_result {
 public:

  MapService_ping_result(const MapService_ping_result&);
  MapService_ping_result& operator=(const MapService_ping_result&);
  MapService_ping_result() : success(0) {
  }

  virtual ~MapService_ping_result() throw();
  int32_t success;

  _MapService_ping_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const MapService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MapService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapService_ping_presult__isset {
  _MapService_ping_presult__isset() : success(false) {}
  bool success :1;
} _MapService_ping_presult__isset;

class MapService_ping_presult {
 public:


  virtual ~MapService_ping_presult() throw();
  int32_t* success;

  _MapService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapService_pointToPointRoute_args__isset {
  _MapService_pointToPointRoute_args__isset() : request(false) {}
  bool request :1;
} _MapService_pointToPointRoute_args__isset;

class MapService_pointToPointRoute_args {
 public:

  MapService_pointToPointRoute_args(const MapService_pointToPointRoute_args&);
  MapService_pointToPointRoute_args& operator=(const MapService_pointToPointRoute_args&);
  MapService_pointToPointRoute_args() {
  }

  virtual ~MapService_pointToPointRoute_args() throw();
  PointToPointRequest request;

  _MapService_pointToPointRoute_args__isset __isset;

  void __set_request(const PointToPointRequest& val);

  bool operator == (const MapService_pointToPointRoute_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const MapService_pointToPointRoute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapService_pointToPointRoute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapService_pointToPointRoute_pargs {
 public:


  virtual ~MapService_pointToPointRoute_pargs() throw();
  const PointToPointRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapService_pointToPointRoute_result__isset {
  _MapService_pointToPointRoute_result__isset() : success(false) {}
  bool success :1;
} _MapService_pointToPointRoute_result__isset;

class MapService_pointToPointRoute_result {
 public:

  MapService_pointToPointRoute_result(const MapService_pointToPointRoute_result&);
  MapService_pointToPointRoute_result& operator=(const MapService_pointToPointRoute_result&);
  MapService_pointToPointRoute_result() {
  }

  virtual ~MapService_pointToPointRoute_result() throw();
  PointToPointResponse success;

  _MapService_pointToPointRoute_result__isset __isset;

  void __set_success(const PointToPointResponse& val);

  bool operator == (const MapService_pointToPointRoute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MapService_pointToPointRoute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapService_pointToPointRoute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapService_pointToPointRoute_presult__isset {
  _MapService_pointToPointRoute_presult__isset() : success(false) {}
  bool success :1;
} _MapService_pointToPointRoute_presult__isset;

class MapService_pointToPointRoute_presult {
 public:


  virtual ~MapService_pointToPointRoute_presult() throw();
  PointToPointResponse* success;

  _MapService_pointToPointRoute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapService_batchPointToPointRoute_args__isset {
  _MapService_batchPointToPointRoute_args__isset() : requests(false) {}
  bool requests :1;
} _MapService_batchPointToPointRoute_args__isset;

class MapService_batchPointToPointRoute_args {
 public:

  MapService_batchPointToPointRoute_args(const MapService_batchPointToPointRoute_args&);
  MapService_batchPointToPointRoute_args& operator=(const MapService_batchPointToPointRoute_args&);
  MapService_batchPointToPointRoute_args() {
  }

  virtual ~MapService_batchPointToPointRoute_args() throw();
  std::vector<PointToPointRequest>  requests;

  _MapService_batchPointToPointRoute_args__isset __isset;

  void __set_requests(const std::vector<PointToPointRequest> & val);

  bool operator == (const MapService_batchPointToPointRoute_args & rhs) const
  {
    if (!(requests == rhs.requests))
      return false;
    return true;
  }
  bool operator != (const MapService_batchPointToPointRoute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapService_batchPointToPointRoute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapService_batchPointToPointRoute_pargs {
 public:


  virtual ~MapService_batchPointToPointRoute_pargs() throw();
  const std::vector<PointToPointRequest> * requests;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapService_batchPointToPointRoute_result__isset {
  _MapService_batchPointToPointRoute_result__isset() : success(false) {}
  bool success :1;
} _MapService_batchPointToPointRoute_result__isset;

class MapService_batchPointToPointRoute_result {
 public:

  MapService_batchPointToPointRoute_result(const MapService_batchPointToPointRoute_result&);
  MapService_batchPointToPointRoute_result& operator=(const MapService_batchPointToPointRoute_result&);
  MapService_batchPointToPointRoute_result() {
  }

  virtual ~MapService_batchPointToPointRoute_result() throw();
  std::vector<PointToPointResponse>  success;

  _MapService_batchPointToPointRoute_result__isset __isset;

  void __set_success(const std::vector<PointToPointResponse> & val);

  bool operator == (const MapService_batchPointToPointRoute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MapService_batchPointToPointRoute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapService_batchPointToPointRoute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapService_batchPointToPointRoute_presult__isset {
  _MapService_batchPointToPointRoute_presult__isset() : success(false) {}
  bool success :1;
} _MapService_batchPointToPointRoute_presult__isset;

class MapService_batchPointToPointRoute_presult {
 public:


  virtual ~MapService_batchPointToPointRoute_presult() throw();
  std::vector<PointToPointResponse> * success;

  _MapService_batchPointToPointRoute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MapServiceClient : virtual public MapServiceIf {
 public:
  MapServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MapServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t ping();
  void send_ping();
  int32_t recv_ping();
  void pointToPointRoute(PointToPointResponse& _return, const PointToPointRequest& request);
  void send_pointToPointRoute(const PointToPointRequest& request);
  void recv_pointToPointRoute(PointToPointResponse& _return);
  void batchPointToPointRoute(std::vector<PointToPointResponse> & _return, const std::vector<PointToPointRequest> & requests);
  void send_batchPointToPointRoute(const std::vector<PointToPointRequest> & requests);
  void recv_batchPointToPointRoute(std::vector<PointToPointResponse> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MapServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MapServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MapServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pointToPointRoute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_batchPointToPointRoute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MapServiceProcessor(boost::shared_ptr<MapServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &MapServiceProcessor::process_ping;
    processMap_["pointToPointRoute"] = &MapServiceProcessor::process_pointToPointRoute;
    processMap_["batchPointToPointRoute"] = &MapServiceProcessor::process_batchPointToPointRoute;
  }

  virtual ~MapServiceProcessor() {}
};

class MapServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MapServiceProcessorFactory(const ::boost::shared_ptr< MapServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MapServiceIfFactory > handlerFactory_;
};

class MapServiceMultiface : virtual public MapServiceIf {
 public:
  MapServiceMultiface(std::vector<boost::shared_ptr<MapServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MapServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MapServiceIf> > ifaces_;
  MapServiceMultiface() {}
  void add(boost::shared_ptr<MapServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

  void pointToPointRoute(PointToPointResponse& _return, const PointToPointRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pointToPointRoute(_return, request);
    }
    ifaces_[i]->pointToPointRoute(_return, request);
    return;
  }

  void batchPointToPointRoute(std::vector<PointToPointResponse> & _return, const std::vector<PointToPointRequest> & requests) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->batchPointToPointRoute(_return, requests);
    }
    ifaces_[i]->batchPointToPointRoute(_return, requests);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MapServiceConcurrentClient : virtual public MapServiceIf {
 public:
  MapServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MapServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t ping();
  int32_t send_ping();
  int32_t recv_ping(const int32_t seqid);
  void pointToPointRoute(PointToPointResponse& _return, const PointToPointRequest& request);
  int32_t send_pointToPointRoute(const PointToPointRequest& request);
  void recv_pointToPointRoute(PointToPointResponse& _return, const int32_t seqid);
  void batchPointToPointRoute(std::vector<PointToPointResponse> & _return, const std::vector<PointToPointRequest> & requests);
  int32_t send_batchPointToPointRoute(const std::vector<PointToPointRequest> & requests);
  void recv_batchPointToPointRoute(std::vector<PointToPointResponse> & _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
