#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class ret_code(object):
    fail = -1
    success = 0
    degrade = 1

    _VALUES_TO_NAMES = {
        -1: "fail",
        0: "success",
        1: "degrade",
    }

    _NAMES_TO_VALUES = {
        "fail": -1,
        "success": 0,
        "degrade": 1,
    }


class Point(object):
    """
    Attributes:
     - lat
     - lng
    """

    thrift_spec = (
        None,  # 0
        (1, TType.DOUBLE, 'lat', None, None, ),  # 1
        (2, TType.DOUBLE, 'lng', None, None, ),  # 2
    )

    def __init__(self, lat=None, lng=None,):
        self.lat = lat
        self.lng = lng

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.lat = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.lng = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Point')
        if self.lat is not None:
            oprot.writeFieldBegin('lat', TType.DOUBLE, 1)
            oprot.writeDouble(self.lat)
            oprot.writeFieldEnd()
        if self.lng is not None:
            oprot.writeFieldBegin('lng', TType.DOUBLE, 2)
            oprot.writeDouble(self.lng)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.lat is None:
            raise TProtocolException(message='Required field lat is unset!')
        if self.lng is None:
            raise TProtocolException(message='Required field lng is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Step(object):
    """
    Attributes:
     - source_node
     - target_node
     - distance
     - duration
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I64, 'source_node', None, None, ),  # 1
        (2, TType.I64, 'target_node', None, None, ),  # 2
        (3, TType.DOUBLE, 'distance', None, None, ),  # 3
        (4, TType.DOUBLE, 'duration', None, None, ),  # 4
    )

    def __init__(self, source_node=None, target_node=None, distance=None, duration=None,):
        self.source_node = source_node
        self.target_node = target_node
        self.distance = distance
        self.duration = duration

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.source_node = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.target_node = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.distance = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.duration = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Step')
        if self.source_node is not None:
            oprot.writeFieldBegin('source_node', TType.I64, 1)
            oprot.writeI64(self.source_node)
            oprot.writeFieldEnd()
        if self.target_node is not None:
            oprot.writeFieldBegin('target_node', TType.I64, 2)
            oprot.writeI64(self.target_node)
            oprot.writeFieldEnd()
        if self.distance is not None:
            oprot.writeFieldBegin('distance', TType.DOUBLE, 3)
            oprot.writeDouble(self.distance)
            oprot.writeFieldEnd()
        if self.duration is not None:
            oprot.writeFieldBegin('duration', TType.DOUBLE, 4)
            oprot.writeDouble(self.duration)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.source_node is None:
            raise TProtocolException(message='Required field source_node is unset!')
        if self.target_node is None:
            raise TProtocolException(message='Required field target_node is unset!')
        if self.distance is None:
            raise TProtocolException(message='Required field distance is unset!')
        if self.duration is None:
            raise TProtocolException(message='Required field duration is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PointToPointRequest(object):
    """
    Attributes:
     - source
     - target
     - step_flag
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'source', (Point, Point.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'target', (Point, Point.thrift_spec), None, ),  # 2
        (3, TType.BOOL, 'step_flag', None, False, ),  # 3
    )

    def __init__(self, source=None, target=None, step_flag=thrift_spec[3][4],):
        self.source = source
        self.target = target
        self.step_flag = step_flag

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.source = Point()
                    self.source.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.target = Point()
                    self.target.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.step_flag = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('PointToPointRequest')
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.STRUCT, 1)
            self.source.write(oprot)
            oprot.writeFieldEnd()
        if self.target is not None:
            oprot.writeFieldBegin('target', TType.STRUCT, 2)
            self.target.write(oprot)
            oprot.writeFieldEnd()
        if self.step_flag is not None:
            oprot.writeFieldBegin('step_flag', TType.BOOL, 3)
            oprot.writeBool(self.step_flag)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.source is None:
            raise TProtocolException(message='Required field source is unset!')
        if self.target is None:
            raise TProtocolException(message='Required field target is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PointToPointResponse(object):
    """
    Attributes:
     - code
     - distance
     - duration
     - steps
     - projections
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'code', None, -1, ),  # 1
        (2, TType.DOUBLE, 'distance', None, -1, ),  # 2
        (3, TType.DOUBLE, 'duration', None, -1, ),  # 3
        (4, TType.LIST, 'steps', (TType.STRUCT, (Step, Step.thrift_spec), False), None, ),  # 4
        (5, TType.LIST, 'projections', (TType.STRUCT, (Point, Point.thrift_spec), False), None, ),  # 5
    )

    def __init__(self, code=thrift_spec[1][4], distance=thrift_spec[2][4], duration=thrift_spec[3][4], steps=None, projections=None,):
        self.code = code
        self.distance = distance
        self.duration = duration
        self.steps = steps
        self.projections = projections

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.distance = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.duration = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.steps = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = Step()
                        _elem5.read(iprot)
                        self.steps.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.projections = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = Point()
                        _elem11.read(iprot)
                        self.projections.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('PointToPointResponse')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.distance is not None:
            oprot.writeFieldBegin('distance', TType.DOUBLE, 2)
            oprot.writeDouble(self.distance)
            oprot.writeFieldEnd()
        if self.duration is not None:
            oprot.writeFieldBegin('duration', TType.DOUBLE, 3)
            oprot.writeDouble(self.duration)
            oprot.writeFieldEnd()
        if self.steps is not None:
            oprot.writeFieldBegin('steps', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.steps))
            for iter12 in self.steps:
                iter12.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.projections is not None:
            oprot.writeFieldBegin('projections', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.projections))
            for iter13 in self.projections:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.code is None:
            raise TProtocolException(message='Required field code is unset!')
        if self.distance is None:
            raise TProtocolException(message='Required field distance is unset!')
        if self.duration is None:
            raise TProtocolException(message='Required field duration is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
